documents = {
1: "apple banana orange", 2: "apple banana",
3: "banana orange",
4: "apple"
}
def build_index(docs): index = {}
for doc_id, text in docs.items(): terms = set(text.split())
for term in terms:
if term not in index:
index[term] = {doc_id} # Set with document ID else:
index[term].add(doc_id) # Add to existing set return index
inverted_index = build_index(documents)

def boolean_and(operands, index): if not operands:
return list(range(1, len(documents) + 1))
result = index.get(operands[0], set()) # First operand for term in operands[1:]:
result = result.intersection(index.get(term, set())) # Intersection with sets of document IDs
return list(result)
def boolean_or(operands, index):
 
result = set()
for term in operands:
result = result.union(index.get(term, set())) return list(result)

def boolean_not(operand, index, total_docs):
operand_set = set(index.get(operand, set())) # Set for the operand all_docs_set = set(range(1, total_docs + 1)) # IDs for all documents
return list(all_docs_set.difference(operand_set)) # Return documents not in the operand set
query1 = ["apple", "banana"] # Query for documents containing both "apple" and "banana"
query2 = ["apple", "orange"] # Query for documents containing "apple" or "orange result1 = boolean_and(query1, inverted_index) # Get documents containing both terms result2 = boolean_or(query2, inverted_index) # Get documents containing either of the terms
result3 = boolean_not("orange", inverted_index, len(documents)) # Get documents not containing "orange"

print("Documents containing 'apple' and 'banana':", result1) print("Documents containing 'apple' or 'orange':", result2) print("Documents not containing 'orange':", result3)
